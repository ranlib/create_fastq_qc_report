#!/usr/bin/env python
import argparse
import pandas
from  fpdf import FPDF
from output_dataframe_to_pdf import output_dataframe_to_pdf

parser = argparse.ArgumentParser(description="create fastq qc report", prog="create_fastq_qc_reportvariant_interpretation", formatter_class=lambda prog: argparse.HelpFormatter(prog, max_help_position=100))
parser.add_argument("--stats", "-s", required=True, type=argparse.FileType("r"), help="Input fastq statistics file in tsv format generated by seqkit stats")
parser.add_argument("--centrifuge", "-c", required=True, type=argparse.FileType("r"), help="Input contamination file in tsv format generated by centrifuge")
parser.add_argument("--samplename", "-n", required=True, type=str, help="Sample name")
parser.add_argument("--verbose", "-v", action="store_true", help="Verbose output")
args = parser.parse_args()

text_height = 8 
cell_height = 6
line_skip = 6

pdf = FPDF('P', 'mm', 'Letter')
pdf.add_page()

pdf.set_font('helvetica', 'BU', 16)
pdf.cell(pdf.w, cell_height, 'Fastq QC Report')
pdf.ln(2*line_skip)

pdf.set_font('helvetica', 'B', text_height)
pdf.cell(pdf.w, cell_height, 'Sample Name = ' + args.samplename)
pdf.ln(2*line_skip)

pdf.set_font('helvetica', '', text_height)
text = f"""1. Purpose:
1.1. Determine sequencing quality from raw fastq files.
1.2. Determine contamination.
"""
pdf.multi_cell(pdf.w, cell_height, text)

text = f"""2. Tools used:
2.1. Sequencing quality: seqkit (https://bioinf.shenwei.me/seqkit/)
2.2. Contamination: centrifuge (https://ccb.jhu.edu/software/centrifuge/manual.shtml)
"""
pdf.multi_cell(pdf.w, cell_height, text)

pdf.cell(pdf.w, cell_height, "3. Results:")
pdf.ln(line_skip)

#
# fastq stats
#
pdf.cell(pdf.w, cell_height, "3.1. Sequencing quality:")
pdf.ln(line_skip)

d = pandas.read_csv(args.stats, sep="\t")
dropped_cols = ['format', 'type', 'sum_len', 'Q1', 'Q2', 'Q3', 'sum_gap', 'N50', 'N50_num', 'Q20(%)', 'Q30(%)']
d = d.drop(columns=dropped_cols)
# extract sample names
d['file'] = d['file'].str.replace(".fastq.gz","",regex=True)
#d = d.rename(columns={'file': 'samplename'})
output_dataframe_to_pdf(pdf, d, 60, 15)

pdf.set_font('helvetica', '', text_height)
#text = f"""Status: FAILED
#Reason: average Q-score < Q20
#Reference: Q30 for a good sequencing run 
#"""
#pdf.multi_cell(pdf.w, cell_height, text)

pdf.cell(pdf.w, cell_height, "Status: FAILED")
pdf.ln()
pdf.cell(pdf.w, cell_height, "Reason: average Q-score < Q20")
pdf.ln()
pdf.cell(pdf.w, cell_height, "Reference: Q30 for a good sequencing run")
pdf.ln(2*line_skip)

#
# taxonomy
#
pdf.cell(pdf.w, cell_height, "3.2. Contamination: top 10 contributions")
pdf.ln(line_skip)

t = pandas.read_csv(args.centrifuge, sep="\t")
# weed out some rows
keepers = ['species', 'genus']
t = t.query('taxRank in @keepers')
# take only the top 10, 
# assume sorted by abundance
t_sorted = t.sort_values('abundance', ascending=False)
t_top20 = t_sorted.head(10).copy()
# truncate name to fit in table cell
t_top20['name'] = t_top20['name'].str.slice(0,30)
output_dataframe_to_pdf(pdf, t_top20, 50, 25)

text = f"""Status: FAILED
Reason: reads assigned to contamination
Reference: number of reads assigned to contamination < 0.1% of minimum required number of reads per sample
"""
pdf.multi_cell(pdf.w, cell_height, text)

#
# Summary
#
pdf.cell(pdf.w, cell_height, "4. Summary:")
pdf.ln(line_skip)
text = f"""Status: FAILED
Reason: insufficient sequencing quality
"""
pdf.multi_cell(pdf.w, cell_height, text)

#
# write pdf
#
output_file = args.samplename +  '_fastq_qc_report.pdf'
pdf.output(output_file, 'F')
